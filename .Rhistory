getwd()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector(1,2,3,4,5)
makeVector(1)
makeVector((1,2,3))
a <- c(1,2,3,4,5)
makeVector(a)
m
getmean
cachemean(a)
cachemean(makeVector(a))
?solve
?cat
func <- function() x
func
func(1)
rm(func)
ls(makeVector)
ls(environment(getmean))
ls(environment(get))
ls(environment(setmean))
?get
get(a)
get(a)
get(1)
get(mean)
?NULL
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
v <- makeVector(c(1,2,3,4,5))
v
v$get()
v$getmean()
v$cachemean()
cachemean(v)
v$getmean
m
getmean(v)
cachmean(v)
cachemean(v)
?setmean
??setmean
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
set <- function(y) {
x <<- y
inverse <<- NULL
}
get <- function() x
setmatrix <- function(matrix) inverse <<- matrix
getmatrix <- function() inverse
list(set = set, get = get,
setmatrix = setmatrix,
getmatrix = getmatrix)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inverse <- x$getmatrix()
if(!is.null(inverse)) {
message("getting cached data")
return(inverse)
}
data <- x$get()
inverse <- solve(data, ...)
x$setmatrix(inverse)
inverse
}
matrix(1:4, 2, 2)
makeCacheMatrix(matrix(1:4, 2, 2))
makeCacheMatrix(matrix(1:4, 2, 2)) -> ex
cacheSolve(ex)
cacheSolve(ex)
ex$getmatrix()
return(1)
?return
return(mean)
?list
debugonce(cacheSolve(ex))
debugonce(cacheSolve)
cacheSolve(ex)
inverse
## These functions
##
## This function caches the value of an entered matrix in another environment separate from the current
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
inverse <<- NULL
}
get <- function() x
setmatrix <- function(matrix) i <<- matrix
getmatrix <- function() i
list(set = set, get = get,
setmatrix = setmatrix,
getmatrix = getmatrix)
}
## This function checks if the
cacheSolve <- function(x, ...) {
i <- x$getmatrix()
if(!is.null(i)) {                 ## this line checks if an inverse is stored (i.e. "inverse" is not null)
message("getting cached data")  ## if i is not null, the message "getting cached data" is printed
return(i)                 ## this line returns the cached value of i (if it exists) and the function ends
}
data <- x$get()         ## if an inverse "i" was not stored (i.e. the inverse is null then data is assigned the value of x
i <- solve(data, ...)   ## the inverse of the matrix "data" is created with the solve function and assigned to "inverse"
x$setmatrix(i)          ## this sets the
i
}
makeCacheMatrix(ex)
cacheSolve(ex)
makeCacheMatrix(a)
cacheSolve(a)
makeCacheMatrix(v)
cacheSolve(v)
cacheSolve(ex)
matrix(2:7, 3, 2) ->test
test
cacheSolve(test)
makeCacheMatrix(test)
cacheSolve(test)
test <- matrix(1:9,3,3)
cacheSolve(test)
test
ex
ex
makeCacheMatrix(test)
cacheSolve(test)
cacheSolve(ex)
ez <- matrix(2:5, 2, 2)
## These functions
##
## This function caches the value of an entered matrix in another environment separate from the current
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setmatrix <- function(matrix) i <<- matrix
getmatrix <- function() i
list(set = set, get = get,
setmatrix = setmatrix,
getmatrix = getmatrix)
}
## This function checks if the
cacheSolve <- function(x, ...) {
i <- x$getmatrix()
if(!is.null(i)) {                 ## this line checks if an inverse is stored (i.e. "inverse" is not null)
message("getting cached data")  ## if i is not null, the message "getting cached data" is printed
return(i)                 ## this line returns the cached value of i (if it exists) and the function ends
}
data <- x$get()         ## if an inverse "i" was not stored (i.e. the inverse is null then data is assigned the value of x
i <- solve(data, ...)   ## the inverse of the matrix "data" is created with the solve function and assigned to "inverse"
x$setmatrix(i)          ## this sets the
i
}
makeCacheMatrix(ez)
cacheSolve(ez)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector(c(1,2,3) -> vector
)
makeVector(c(1,2,3)) -> vector
cacheMean(vector)
cachemean(vector)
cachemean(vector)
rm(ez)
rm(test)
makeCacheMatrix(ez <- matrix(2:5, 2, 2))
makeCacheMatrix(matrix(2:5, 2, 2)) -> ez
cacheSolve(ez)
makeCacheMatrix(matrix(1:9, 3, 3)) -> test
cacheSolve(test)
test
test$getmatrix
makeCacheMatrix(matrix(1:9, 3, 3)) -> test
cacheSolve(test)
matrix(1:9, 3, 3)
makeCacheMatrix(matrix(1:9, 3, 3)) -> a
cacheSolve(a)
cacheSolve(ex)
ex
makeCacheMatrix(matrix(c(1,1,1,1,1,1,1,1,1), 3, 3)) -> a
cacheSolve(a)
matrix(c(1,1,1,1,1,1,1,1,1), 3, 3)
matrix(1:16, 4, 4)
makeCacheMatrix(matrix(1:16, 4, 4)) -> test
cacheSolve(test)
makeCacheMatrix(matrix(1:4,2,2)) -> test
cacheSolve(test)
## These functions make it so an entered matrix can have its inverse cached in another environment separate from the current one.
##
## This function creates a special matrix that is actually a list that can set and get the value of the matrix and can
## set and get the value of the inverse of that matrix.
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setmatrix <- function(matrix) i <<- matrix
getmatrix <- function() i
list(set = set, get = get,
setmatrix = setmatrix,
getmatrix = getmatrix)
}
## This function checks if the "special matrix" created by the first function has already had its inverse calculated and set. If it
## has, it prints that inverse matrix. If it has not, it calculates the inverse matrix, sets it in the cache, then prints it.
cacheSolve <- function(x, ...) {
i <- x$getmatrix()
if(!is.null(i)) {                 ## this line checks if an inverse is stored (i.e. "inverse" is not null)
message("getting cached data")  ## if i is not null, the message "getting cached data" is printed
return(i)                 ## this line returns the cached value of i (if it exists) and the function ends
}
data <- x$get()         ## if an inverse "i" was not stored (i.e. the inverse is null then data is assigned the value of x)
i <- solve(data, ...)   ## the inverse of the matrix "data" is calculated with the solve function and assigned to "inverse"
x$setmatrix(i)          ## this sets the value of the inverse matrix in the cache
i                       ## this prints the value of the inverse matrix
}
cacheSolve(ex)
getwd()
?list
## These functions make it so an entered matrix can have its inverse calculated cached in another environment
## separate from the current one.
## This function creates a special matrix that is actually a list that can set and get the value of the matrix and can
## set and get the value of the inverse of that matrix.
makeCacheMatrix <- function(x = matrix()) {     ## this line creates the function "makeCacheMatrix" which takes a matrix as its input
i <- NULL               ## this line creates the dummy variable "i" and sets its value to NULL in the current environment
set <- function(y) {    ## this line creates the function "set" which takes an input "y"
x <<- y         ## this line assigns the input "y" to a value "x" in a separate environment
i <<- NULL      ## this line assigns a NULL value to "i" in a separate environment
}
get <- function() x                     ## this line creates the function "get" which prints the value of the variable "x"
setmatrix <- function(matrix) i <<- matrix  ##creates the function "setmatrix" which sets external variable "i" to the input
getmatrix <- function() i               ##
list(set = set, get = get,              ## this creates a list of the functions and sets their tags to be the same as
setmatrix = setmatrix,             ## the function name
getmatrix = getmatrix)
}
## This function checks if the "special matrix" created by the first function has already had its inverse calculated and set. If it
## has, it prints that inverse matrix. If it has not, it calculates the inverse matrix, sets it in the cache, then prints it.
cacheSolve <- function(x, ...) {
i <- x$getmatrix()
if(!is.null(i)) {                 ## this line checks if an inverse is stored (i.e. "inverse" is not null)
message("getting cached data")  ## if i is not null, the message "getting cached data" is printed
return(i)                 ## this line returns the cached value of i (if it exists) and the function ends
}
data <- x$get()         ## if an inverse "i" was not stored (i.e. the inverse is null then data is assigned the value of x)
i <- solve(data, ...)   ## the inverse of the matrix "data" is calculated with the solve function and assigned to "inverse"
x$setmatrix(i)          ## this sets the value of the inverse matrix in the cache
i                       ## this prints the value of the inverse matrix
}
cacheSolve(ex)
